#
# Cookbook Name:: {{app.name}} v{{app.version}}
# Recipe:: backup
#
# {{app.publisher.packaging_copyright}}
#

# creates a tarball containing {{app.name}} backup files
# structure of the tarball:
# tmp/              contains the database dump and other ancillary files (if any)
# bin/              contains the {{app.name}} binary files

base = Chef::Recipe::Base
app_lib = Chef::Recipe::{{app.chefName}}

app = app_lib.define_app self
app_lib.init self, app

timestamp = app[:backup_timestamp] = Time.new.strftime("%Y-%m-%d-%H%M%S")
backup_dir = app[:backup_dir] = "/var/cloudos/backup/{{app.name}}"

tarball = "{{app.name}}-#{timestamp}.tar"

init_bag = data_bag_item('cloudos', 'init')
run_as = init_bag['run_as']

directory backup_dir do
    owner "root"
    group "root"
    mode 0644
    recursive true
    action :create
end

{{#if app.backup.pre}}
    {{#each app.backup.pre}}
        app_lib.exec self, app, 'bash -c "{{safe exec}}"', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}'
    {{/each}}
{{/if}}

directory "#{backup_dir}/tmp" do
    owner "root"
    group "root"
    mode 0644
    recursive true
    action :create
end

{{#if app.backup.databases}}
# Backup multiple databases
database = Chef::Recipe::{{app.database.chefType}}

  {{#each app.backup.databases}}
# Backup database: {{this}}
dbname = app_lib.subst('{{this}}', app)
if dbname.include? '*'
  database.find_matching_databases(dbname).each do |db|
    dumpfile = "dbdump-{{app.name}}-#{db}-#{timestamp}.sql"
    full_dumpfile = "#{backup_dir}/tmp/#{dumpfile}"
    database.dump self, db, full_dumpfile
  end

else
  dumpfile = "dbdump-{{app.name}}-#{dbname}-#{timestamp}.sql"
  full_dumpfile = "#{backup_dir}/tmp/#{dumpfile}"
  database.dump self, dbname, full_dumpfile
end

  {{/each}}
{{else}}
  {{#if app.database}}
# Backup database
database = Chef::Recipe::{{app.database.chefType}}
dumpfile = "dbdump-{{app.name}}-#{timestamp}.sql"
    {{#if app.database.dbname}}
dbname = app[:dbname] = '{{ident app.database.dbname}}'
    {{/if}}
    {{#if app.parent}}
dbname ||= app[:dbname] ||= '{{ident app.parent}}'
    {{/if}}

default_db_val = ( (app[:run_as].nil? || app[:run_as] == 'www-data') ? app[:name] : app[:run_as] ).gsub(/\W/, '_')
dbname ||= app[:dbname] ||= default_db_val

full_dumpfile = "#{backup_dir}/tmp/#{dumpfile}"
database.dump self, dbname, full_dumpfile
  {{/if}}
{{/if}}

{{#if app.backup.files}}
backup_files = []
    {{#each app.backup.files}}
backup_files << app_lib.subst('{{this}}',app)
    {{/each}}
filelist = backup_files.join(" ")
{{/if}}

bash "back up {{app.name}} data & files (with doc_root=#{app[:doc_root]})" do
    user "root"
    cwd backup_dir
    code <<-EOF
TIMESTAMP="#{timestamp}"
BACKUP_DIR=#{backup_dir}
TARBALL="#{tarball}"
RUNAS="#{run_as}"
#KEY="/home/${RUNAS}/.backup-key"
KEY="/etc/.cloudos"

echo "creating backup tarball at ${BACKUP_DIR}/${TARBALL}"

{{#if app.backup.files}}
echo "adding manifest-specified files to backup tarball"
tar rfp $BACKUP_DIR/$TARBALL #{filelist}
{{else}}
echo "adding doc_root to backup tarball"
tar rfp $BACKUP_DIR/$TARBALL #{app[:doc_root]}
{{/if}}

if [ -d tmp ] ; then
  tar rfp $BACKUP_DIR/$TARBALL tmp
fi

bzip2 $BACKUP_DIR/$TARBALL

openssl enc -e -aes256 -pass file:$KEY -in $BACKUP_DIR/$TARBALL.bz2 -out $BACKUP_DIR/$TARBALL.enc

if [ -f $BACKUP_DIR/$TARBALL.bz2 ] ; then
  echo "backup tarball created"
{{#if app.database}}
  rm -rf tmp
{{/if}}
  if [ -f $BACKUP_DIR/$TARBALL.enc ] ; then
    echo "backup tarball encrypted"
    rm $BACKUP_DIR/$TARBALL.bz2
  fi
else
  # should we clean up the db dump in this case?
  echo "couldn't create tarball"
  exit 1
fi
EOF
end

{{#if app.backup.post}}
    {{#each app.backup.post}}
app_lib.exec self, app, 'bash -c "{{safe exec}}"', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}'
    {{/each}}
{{/if}}