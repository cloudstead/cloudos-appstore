#
# Cookbook Name:: {{app.name}}
# Recipe:: validate
#
# {{app.publisher.packaging_copyright}}
#
#

{{#if app.web}}
include_recipe '{{app.web.type}}::default'
{{/if}}

base_lib = Chef::Recipe::Base
app_lib = Chef::Recipe::{{app.chefName}}
app = app_lib.define_app self

validate_services = false
{{#if app.services}}
validate_services = true
    {{#each app.services}}
        {{#if ports}}
            {{#each ports}}
base_lib.restart_unless_port(self, app_lib.subst_string('{{this}}', app), '{{name}}')
            {{/each}}
        {{/if}}
    {{/each}}
{{/if}}

{{#if app.sysinit}}
validate_services = true
{{/if}}

{{#if app.validation.pre_scripts}}
    {{#each app.validation.pre_scripts}}
app_lib.exec self, app, '{{safe exec}}', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}', {{hash_or_nil env}}
    {{/each}}
{{/if}}

if validate_services
    app[:services].each do |service|
        app_lib.restart_if_not_running self, app, service
        app_lib.validate_service self, app, service
    end
end

{{#if app.web}}
    {{#if app.validation.service_url}}
service_url = app_lib.subst_string('{{app.validation.service_url}}', app)
service_url = "#{app[:service_url].chomp('/')}#{service_url}" if service_url.start_with? '/'
    {{else}}
service_url = app[:service_url]
    {{/if}}
app_lib.validate_web self, app, {{app.validation.timeout}}, service_url
{{/if}}

{{#if app.validation.post_scripts}}
    {{#each app.validation.post_scripts}}
app_lib.exec self, app, '{{safe exec}}', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}', {{hash_or_nil env}}
    {{/each}}
{{/if}}
