#
# Cookbook Name:: {{app.name}}
# Library:: database_lib
#
# {{app.publisher.packaging_copyright}}
#

require 'fileutils'
require 'json'

class Chef::Recipe::{{app.chefName}}

    def self.db_password (app, dbname)
{{#if app.database.dbpass}}
        subst_string('{{app.database.dbpass}}', app)
{{else}}
        base = Chef::Recipe::Base
        base.password("db_#{dbname}")
{{/if}}
    end

    def self.drop_database(chef, app)
        database = Chef::Recipe::{{app.database.chefType}}
        set_database_config app
        database.drop_db chef, app[:dbname]
    end

    def self.set_database_config (app)
        database = Chef::Recipe::{{app.database.chefType}}
        base = Chef::Recipe::Base

        app[:dbtype] = '{{app.database.type}}'

{{#if app.database.dbname}}
        app[:dbname] = '{{ident app.database.dbname}}'
{{/if}}

{{#if app.database.dbuser}}
        app[:dbuser] = '{{ident app.database.dbuser}}'
{{/if}}

{{#if app.parent}}
        app[:dbname] ||= '{{ident app.parent}}'
        app[:dbuser] ||= '{{ident app.parent}}'
        app[:dbuser] ||= '{{ident app.parent}}'
        app[:dbpass] = db_password(app, app[:dbname])
{{else}}
        default_db_val = ( (app[:run_as] == 'www-data') ? app[:name] : app[:run_as] ).gsub(/\W/, '_')
        app[:dbname] ||= default_db_val
        app[:dbuser] ||= default_db_val
        app[:dbpass] = db_password(app, app[:dbname])
{{/if}}
    end

    def self.database (chef, app)

        database = Chef::Recipe::{{app.database.chefType}}
        base = Chef::Recipe::Base

        set_database_config app

        {{#unless app.parent}}
            {{#if app.database.allow_create_db}}
        allow_create_db = true
            {{else}}
        allow_create_db = false
            {{/if}}
        database.create_user(chef, app[:dbuser], app[:dbpass], allow_create_db)
        {{/unless}}

        unless_table = nil
        {{#if app.database.unless}}
        unless_table = '{{app.database.unless}}'
        {{/if}}

        {{#if app.database.set_config}}
          {{#each app.database.set_config}}
        database.set_config(chef, '{{group}}', '{{name}}', '{{value}}')
          {{/each}}
        {{/if}}

        exists = database.db_exists(app[:dbname])
        do_create = !(exists && database.has_tables(app[:dbname], app[:dbuser], app[:dbpass]))

        {{#if app.database.auto_migration}}
        do_migrate = false
        schema_version = nil
        unless defined? database_{{app.style}}_self_managed_schema_versions
            schema_version = database.get_schema_version chef, app[:dbname], app[:dbuser], app[:dbpass], app[:name]
            if schema_version.to_s.empty?
                do_create = true
            elsif schema_version.to_s != '{{app.database.schema_version}}'
                do_migrate = true
            end
        end
        {{/if}}

        if do_create
        {{#if app.database.init_command}}
            db_init = '{{app.database.init_command.exec}}'
            db_init = app[:run_as_home] + '/' + db_init unless db_init.start_with?('/')
            db_init.gsub!('@dbuser', app[:dbuser]);
            db_init.gsub!('@dbname', app[:dbname]);
            db_init.gsub!('@dbpass', app[:dbpass]);
            chef.bash "initialize {{app.name}} database with #{db_init}" do
                user 'root'
                code <<-EOF
          {{#if app.database.init_command.stdin}}
echo '{{app.database.init_command.stdin}}' | #{db_init}
          {{else}}
#{db_init}
          {{/if}}
EOF
            end

        {{else}}
            database.create_db(chef, app[:dbname], app[:dbuser])
            schema_file = nil

            {{#if app.database.schema}}
            # Load the schema specified in the manifest
            schema_file = subst('{{app.database.schema}}', app)
            schema_file = "#{app[:run_as_home]}/#{schema_file}" unless schema_file.start_with? '/'
            {{else}}
            # No schema specified in manifest, look for schema file in standard locations
            [ '_schema', '-schema', '' ].each do |suffix|
                schema_file = subst("@files/{{app.name}}#{suffix}.sql", app)
                if File.exists? "#{schema_file}.gz"
                    %x(gunzip #{schema_file}.gz)
                end
                # todo: move this into a common utility, use whenever we need to copy stuff from @files to /tmp
                if File.exists? schema_file
                  tmp_schema = "/tmp/{{app.name}}#{suffix}.sql"
                  File.open(tmp_schema, 'w') { |tmp|
                    tmp.write(File.open(schema_file, 'r') { |schema| schema.read })
                  }
                  FileUtils.chmod(0600, tmp_schema)
                  FileUtils.chown('root', 'root', tmp_schema);
                  schema_file = tmp_schema
                  break
                end
            end
            {{/if}}

            database.initialize_db(chef, schema_file, app[:dbuser], app[:dbpass], app[:dbname], unless_table) unless schema_file.nil? || !File.exists?(schema_file)
        {{/if}}

        {{#if app.database.auto_migration}}
            database.create_metadata_table chef, app[:name], '{{app.database.schema_version}}', app[:dbname], app[:dbuser], app[:dbpass]
        {{/if}}
        end   # if do_create

        if defined? database_{{app.style}}
            database_{{app.style}}(chef, app, database, do_create)

        {{#if app.database.auto_migration}}
        elsif do_migrate
            json = nil
            begin
                json = %x(cos db-migrate #{schema_version} '{{app.database.schema_version}}' #{subst('@files/migrations/db', app)}).strip
            rescue => e
                puts "command failed: cos db-migrate #{schema_version} '{{app.database.schema_version}}' #{subst('@files/migrations/db', app)}"
            end
            unless json.to_s.strip.empty?
                migrations = JSON.parse(json)
                migrations.each do |migration|
                    database.update_schema chef, app[:name], migration['to'], migration['file'], app[:dbname], app[:dbuser], app[:dbpass]
                end
            end
        {{/if}}

        {{#if app.database.upgrade_command}}
        else
            upgrade = '{{app.database.upgrade_command.exec}}'
            upgrade = app[:run_as_home] + '/' + upgrade unless upgrade.start_with?('/')
            upgrade.gsub!('@dbuser', app[:dbuser]);
            upgrade.gsub!('@dbname', app[:dbname]);
            upgrade.gsub!('@dbpass', app[:dbpass]);
            chef.bash "initialize {{app.name}} database with #{upgrade}" do
            user 'root'
            code <<-EOF
            {{#if app.database.upgrade_command.stdin}}
                echo '{{app.database.upgrade_command.stdin}}' | #{upgrade}
            {{else}}
                #{upgrade}
            {{/if}}
            EOF
            end
        {{/if}}
        end

        {{#if app.database.inserts}}
            {{#each app.database.inserts}}
                {{#if dbname}}
            insertIntoDb = '{{dbname}}'
                {{else}}
            insertIntoDb = app[:dbname]
                {{/if}}
            database.insert(chef, app[:dbuser], insertIntoDb, {
                :sql => subst_string('{{safe sql}}', app),
                :unless => subst_string('{{safe unless}}', app)
            })
            {{/each}}
        {{/if}}

        database.restart chef
    end

end