#
# Cookbook Name:: {{app.name}}
# Recipe:: default
#
# {{app.publisher.packaging_copyright}}
#

{{#if app.repo}}
include_recipe 'git::default'
{{/if}}

{{#if app.web}}
include_recipe '{{app.web.type}}::default'
{{/if}}

{{#if app.database}}
include_recipe '{{app.database.type}}::default'
{{/if}}

require 'securerandom'

base = Chef::Recipe::Base
app_lib = Chef::Recipe::{{app.chefName}}

{{#if app.sysctl}}
# Handle sysctl changes first
    {{#each app.sysctl}}
base.sysctl '{{setting}}' '{{min_value}}'
    {{/each}}
{{/if}}

# Install any certs provided
base.local_certs('{{app.name}}').each do |cert_name|
  base.install_ssl_cert self, '{{app.name}}', cert_name
  Chef::Recipe::Java.install_cert(self, cert_name, base.pem_path(cert_name)) if defined? Chef::Recipe::Java.install_cert
end

app = app_lib.define_app self

{{#if app.pre_package}}
  {{#each app.pre_package}}
app_lib.exec self, app, '{{safe exec}}', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}', {{hash_or_nil env}}
  {{/each}}
{{/if}}

{{#if app.packages}}
  {{#each app.packages}}
app_lib.install_package self, '{{this}}'
  {{/each}}
{{/if}}

{{#if app.post_package}}
    {{#each app.post_package}}
app_lib.exec self, app, '{{safe exec}}', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}', {{hash_or_nil env}}
    {{/each}}
{{/if}}

{{#if app.users}}
    {{#each app.users}}
        {{#if kerberos}}
raise "cannot create kerberos user without kerberos library." unless defined? Chef::Recipe::Kerberos.create_user
kerberos_password = app[:users]['{{label}}'][:password] = base.password('{{user}}')
Chef::Recipe::Kerberos.create_user self, '{{user}}', kerberos_password

        {{else}}
app_lib.user self, app, '{{user}}', {{quoted_or_nil home}}, {{quoted_or_nil creation_group}}, {{can_login}}, {{system}}
        {{/if}}
    {{/each}}
{{/if}}

{{#if app.groups}}
# Define OS-level user groups
  {{#each app.groups}}
raise "No group defined: {{label}}" unless app[:groups]['{{label}}']
app_lib.define_group self, app, '{{group}}', app[:groups]['{{label}}'][:members]
  {{/each}}
{{/if}}

{{#if app.tarball}}
app_lib.install_tarball self, app
{{/if}}

{{#if app.repo}}
app_lib.install_git self, app
{{/if}}

{{#if app.database}}
# database-related configuration is in libraries/database_lib.rb and libraries/database_{{app.style}}_lib.rb
app_lib.database_{{app.style}}_packages self, app if defined? app_lib.database_{{app.style}}_packages
{{/if}}

{{#if app.prep_code}}
    {{#each app.prep_code}}
app_lib.exec self, app, '{{safe exec}}', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}', {{hash_or_nil env}}
    {{/each}}
{{/if}}

app_lib.init_{{app.style}} self, app if defined? app_lib.init_{{app.style}}

{{#if app.dirs}}
    {{#each app.dirs}}
app_lib.dir self, '{{this}}', app
    {{/each}}
{{/if}}

{{#if app.templates}}
    {{#each app.templates}}
app_lib.template_file self, '{{this}}', '{{@key}}', app
    {{/each}}
{{/if}}

{{#if app.database}}
app_lib.database self, app
{{/if}}

{{#if app.web}}
app_lib.{{app.web.type}} self, app
{{/if}}

{{#if app.copy}}
    {{#each app.copy}}
app_lib.copy self, '{{this}}', '{{@key}}', app
    {{/each}}
{{/if}}

{{#if app.move}}
    {{#each app.move}}
app_lib.move self, '{{this}}', '{{@key}}', app
    {{/each}}
{{/if}}

{{#if app.symlinks}}
    {{#each app.symlinks}}
app_lib.symlink self, '{{this}}', '{{@key}}', app
    {{/each}}
{{/if}}

{{#if app.perms}}
  {{#each app.perms}}
app_lib.permission self, '{{@key}}', app, {{quoted_or_nil chown}}, {{quoted_or_nil chgrp}}, {{quoted_or_nil perms}}, {{recursive}}
  {{/each}}
{{/if}}

{{#if app.append}}
    {{#each app.append}}
app_lib.append self, '{{safe this}}', '{{@key}}', app
    {{/each}}
{{/if}}

{{#if app.mailboxes}}
raise "Cannot create mailboxes, standard email_lib not found" unless defined? Chef::Recipe::Email.create_mailbox

email_lib = Chef::Recipe::Email
  {{#each app.mailboxes}}
email_lib.create_mailbox self, app_lib.subst_string('{{address}}', app), app[:hostname], app_lib.subst_string({{quoted_or_nil alias_for}}, app)
  {{/each}}
{{/if}}

{{#if app.cloudos_groups}}
  {{#each app.cloudos_groups}}
app_lib.cloudos_group self, app, '{{@key}}', '{{safe description}}', '{{quota}}', '{{mirror}}', '{{members}}'
  {{/each}}
{{/if}}

{{#if app.auth.user_management}}
app_lib.user_management self, app
{{/if}}

{{#if app.post_install}}
    {{#each app.post_install}}
app_lib.exec self, app, '{{safe exec}}', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}', {{hash_or_nil env}}
    {{/each}}
{{/if}}

if app[:doc_root]
  # ensure doc root is owned by / readable by apache group
  app_lib.permission(self, '@doc_root', app, nil, app[:run_as], '-R u+rx')

  # ensure doc root base world readable/listable (but not recursively, there may be private folders within)
  app_lib.permission(self, '@doc_root', app, nil, nil, 'a+rx')
end

{{#if app.logrotate}}
    {{#each app.logrotate}}
app_lib.logrotate self, app, '{{this}}'
    {{/each}}
{{/if}}

{{#if app.sysinit}}
    {{#each app.sysinit}}
app_lib.create_sysinit self, app, '{{this}}'
    {{/each}}
{{/if}}

{{#if app.services}}
    {{#each app.services}}
        {{#if chefProvider}}
app_lib.create_service self, app, '{{name}}', '{{safe pattern}}', {{chefProvider}}
        {{else}}
app_lib.create_service self, app, '{{name}}', '{{safe pattern}}'
        {{/if}}
    {{/each}}
{{/if}}

{{#if app.web.mode.separate_hostname}}
app_lib.create_dns self, app, 'A', "#{app[:name]}-#{app[:hostname]}", app[:ipaddress]
app_lib.create_dns self, app, 'A', "#{app[:name]}.#{app[:hostname]}", app[:ipaddress]
{{/if}}

{{#if app.web}}
app_lib.permission(self, '/var/www', app, 'root.root', nil, '755')
app_lib.{{app.web.type}}_reload self
{{/if}}

# Ensure services are running
app[:services].each do |service|
  app_lib.restart_if_not_running self, app, service
end
