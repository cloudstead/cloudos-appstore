#
# Cookbook Name:: {{app.name}}
# Library:: database_rails_lib
#
# {{app.publisher.packaging_copyright}}
#

class Chef::Recipe::{{app.chefName}}

    def self.database_rails_packages (chef, app)
        chef.package 'libpq-dev' do
            action :install
        end
    end

    # Tells the database_lib to deactivate automatic migrations
    def self.database_rails_self_managed_schema_versions
        true
    end

    def self.database_rails (chef, app, database, do_create)

        chef.template "#{rails_dir(app)}/config/database.yml" do
          owner app[:run_as]
          group 'root'
          mode '0600'
          variables({ :app => app })
          action :create
        end

        if do_create
{{#if app.database.options.rake_create_tasks}}
            rake_tasks = [ {{#each app.database.options.rake_create_tasks}}{{quoted_or_nil this}}, {{/each}} ]
{{else}}
            rake_tasks = %w( db:schema:load db:seed )
{{/if}}
        else
{{#if app.database.options.rake_migrate_tasks}}
            rake_tasks = [ {{#each app.database.options.rake_migrate_tasks}}{{quoted_or_nil this}}, {{/each}} ]
{{else}}
            rake_tasks = %w( db:migrate )
{{/if}}

{{#if app.database.inserts}}
    {{#each app.database.inserts}}
        {{#if dbname}}
            insertIntoDb = '{{dbname}}'
        {{else}}
            insertIntoDb = app[:dbname]
        {{/if}}
            database.insert(chef, app[:dbuser], insertIntoDb, {
                :sql => app_lib.subst_string('{{safe sql}}', app),
                :unless => app_lib.subst_string('{{safe unless}}', app)
            })
    {{/each}}
{{/if}}
        end

        chef.bash "initialize {{app.name}} database via rake tasks: #{rake_tasks}" do
          user app[:run_as]
          cwd Chef::Recipe::{{app.chefName}}.rails_dir(app)
          code <<-EOF
for task in "#{rake_tasks.join(' ')}" ; do
  echo "yes" | bundle exec rake ${task} RAILS_ENV=production
done
        EOF
          not_if { database.count_tables(app[:dbname], app[:dbuser], app[:dbpass]) > 0  }
        end

    end

end