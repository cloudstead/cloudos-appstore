#
# Cookbook Name:: {{app.name}} v{{app.version}}
# Recipe:: restore
#
# {{app.publisher.packaging_copyright}}
#

# NB: this recipe assumes that the backup tarball has already been downloaded and
# unzipped into restore_dir

base = Chef::Recipe::Base
app_lib = Chef::Recipe::{{app.chefName}}

app = app_lib.define_app self

{{#if app.database}}
database = Chef::Recipe::{{app.database.chefType}}
dumpfile = "dbdump-{{app.name}}-#{timestamp}.sql"
    {{#if app.database.dbname}}
dbname = app[:dbname] = '{{ident app.database.dbname}}'
    {{/if}}
    {{#if app.database.dbuser}}
dbuser = app[:dbuser] = '{{ident app.database.dbuser}}'
    {{/if}}
    {{#if app.parent}}
dbname ||= app[:dbname] ||= '{{ident app.parent}}'
dbuser ||= app[:dbuser] ||= '{{ident app.parent}}'
    {{/if}}

default_db_val = ( (app[:run_as].nil? || app[:run_as] == 'www-data') ? app[:name] : app[:run_as] ).gsub(/\W/, '_')
dbname ||= app[:dbname] ||= default_db_val

dbpass = app[:dbpass] = base.password("db_#{dbname}")
{{/if}}

init_bag = data_bag_item('cloudos', 'cloudos-init')
run_as = init_bag['cloudos']['run_as']

# before we do anything else, check the currently running app version to make sure it corresponds
# to the version we're backed up for

app_metadata = JSON.parse(File.read('/home/#{run_as}/app-repository/{{app.name}}/metadata.json'))
active_version = app_metadata['active_version']
if active_version != '{{app.version}}'
    Chef::Application.fatal!('Restore failed. The currently active version of {{app.name}} is #{active_version};
the restore recipe supports version {{app.version}}. It may be possible to reinstall {{app.name}} v{{app.version}} from
a cloudos backup tarball.')
end

{{#if app.restore.pre}}
    {{#each app.restore.pre}}
app_lib.exec self, app, '{{safe exec}}', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}'
    {{/each}}
{{/if}}

bash "restore {{app.name}}" do
  user "root"
  cwd "<%=@restore_dir%>"
  code <<-EOF
echo "restoring files from backup at <%=@restore_dir%>"
cp -rpf * /
EOF
end

{{#if app.database}}
database.drop_db(chef, dbname)
database.create_db(chef, dbname, dbuser)
database.initialize_db(chef, "<%=@restore_dir%>/tmp/<%=@dumpfile%>", dbuser, dbpass, dbname)
{{/if}}

{{#if app.restore.post}}
    {{#each app.backup.post}}
app_lib.exec self, app, '{{safe exec}}', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}'
    {{/each}}
{{/if}}
