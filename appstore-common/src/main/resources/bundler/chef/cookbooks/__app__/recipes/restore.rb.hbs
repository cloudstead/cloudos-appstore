#
# Cookbook Name:: {{app.name}} v{{app.version}}
# Recipe:: restore
#
# {{app.publisher.packaging_copyright}}
#

# NB: this recipe assumes that the backup tarball has already been downloaded and
# unzipped into restore_dir

base = Chef::Recipe::Base
app_lib = Chef::Recipe::{{app.chefName}}

app = app_lib.define_app self
app_lib.init self, app

timestamps_bag = data_bag_item('restore', 'timestamps')
timestamp = app[:backup_timestamp] = timestamps_bag['{{app.name}}']
backup_dir = app[:backup_dir] = "/var/cloudos/backup/{{app.name}}"

init_bag = data_bag_item('cloudos', 'init')
run_as = init_bag['run_as']

# before we do anything else, check the currently running app version to make sure it corresponds
# to the version we're backed up for

app_metadata = JSON.parse(File.read("/home/#{run_as}/app-repository/{{app.name}}/metadata.json"))
active_version = app_metadata['active_version']
if active_version != '{{app.version}}'
    Chef::Application.fatal!('Restore failed. The currently active version of {{app.name}} is #{active_version};
the restore recipe supports version {{app.version}}. It may be possible to reinstall {{app.name}} v{{app.version}} from
a cloudos backup tarball.')
end

{{#if app.restore.suspend}}
# Stop all services
app[:services].each do |service|
  app_lib.stop_service self, app, service
end
{{/if}}

{{#if app.restore.pre}}
    {{#each app.restore.pre}}
app_lib.exec self, app, '{{safe exec}}', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}'
    {{/each}}
{{/if}}

bash "restore {{app.name}}" do
  user "root"
  cwd backup_dir
  code <<-EOF
echo "restoring files from backup at #{backup_dir}"

for rootdir in etc var ; do
  if [ -d ./${rootdir} ] ; then
    chown -R root.root ./${rootdir}
  fi
done
if [ -d ./home ] ; then
  chown -R #{app[:run_as]} ./${rootdir}
fi

rsync -avzc --exclude="*.enc" ./* /

# ensure that backup_dir, /tmp /etc /var and /home maintain proper ownership and permissions
chmod 1777 /tmp && chown root.root /tmp
for rootdir in /etc /var /home ; do
  chmod 755 ${rootdir} && chown root.root ${rootdir}
done
chown -R #{base.chef_user} #{backup_dir}
EOF

end

{{#if app.perms}}
# Ensure app filesystem ownership and permissions are set correctly
if app[:run_as] != 'www-data' && app[:run_as_home] != nil
  app_lib.permission self, app[:run_as_home], app, app[:run_as], 'root', '770', true
end
    {{#each app.perms}}
app_lib.permission self, '{{@key}}', app, {{quoted_or_nil chown}}, {{quoted_or_nil chgrp}}, {{quoted_or_nil perms}}, {{recursive}}
    {{/each}}
{{/if}}

{{#if app.database}}
database = Chef::Recipe::{{app.database.chefType}}

  {{#if app.database.dbname}}
dbname = app[:dbname] = '{{ident app.database.dbname}}'
  {{/if}}
  {{#if app.parent}}
dbname ||= app[:dbname] ||= '{{ident app.parent}}'
  {{/if}}
default_db_val = ( (app[:run_as].nil? || app[:run_as] == 'www-data') ? app[:name] : app[:run_as] ).gsub(/\W/, '_')
dbname ||= app[:dbname] ||= default_db_val

  {{#if app.database.dbuser}}
dbuser = app[:dbuser] = '{{ident app.database.dbuser}}'
  {{/if}}
  {{#if app.parent}}
dbuser ||= app[:dbuser] ||= '{{ident app.parent}}'
  {{/if}}
dbuser ||= app[:dbuser] ||= '{{app.name}}'
dbpass = app[:dbpass] = base.password("db_#{dbname}")

  {{#if app.backup.databases}}
# Restore multiple databases
dbnames = []
    {{#each app.backup.databases}}
# Restore databases(s): {{this}}
db = app_lib.subst_string('{{this}}', app)
if db.include? '*'
  # Find matching database names in sql dump filenames
  dbnames.concat %x(ls -1 /tmp/dbdump-{{app.name}}-#{db}-#{timestamp}.sql).lines.collect { |db| db.scan(/dbdump-{{app.name}}-(#{db.gsub('*', '.*')})-#{timestamp}.sql/)[0] }.collect {|db| db[0]}
else
  dbnames << db
end
    {{/each}}
  {{else}}
# Restore app database
dbnames = [ dbname ]
  {{/if}}

# Drop all databases
dbnames.each do |db|
    database.drop_db(self, db)
end

# Create user and all databases, initialize databases
database.create_user(self, dbuser, dbpass)
dbnames.each do |db|
    dumpfile = "dbdump-{{app.name}}-#{db}-#{timestamp}.sql"
    database.create_db(self, db, dbuser)
    database.initialize_db(self, "/tmp/#{dumpfile}", dbuser, dbpass, dbname)
end
{{/if}}

{{#if app.restore.post}}
    {{#each app.restore.post}}
app_lib.exec self, app, '{{safe exec}}', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}'
    {{/each}}
{{/if}}

# Ensure services are running
app[:services].each do |service|
  app_lib.restart_if_not_running self, app, service
end
