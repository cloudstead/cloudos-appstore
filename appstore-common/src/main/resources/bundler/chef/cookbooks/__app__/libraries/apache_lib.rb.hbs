#
# Cookbook Name:: {{app.name}}
# Library:: apache_lib
#
# {{app.publisher.packaging_copyright}}
#

class Chef::Recipe::{{app.chefName}}

    def self.get_config (app)
        base = Chef::Recipe::Base
        config = {
            :mode => :{{app.web.mode}},
            :mount       => subst_string(app[:mount], app),
            :local_mount => subst_string(app[:local_mount], app),
            :doc_root    => subst_string(app[:doc_root], app),

            {{#if app.auth.http_auth}}
            :auth => :{{app.auth.http_auth}},
            {{/if}}

            {{#if app.web.apache.dir}}
            :dir => %w( {{#each app.web.apache.dir}}{{this}} {{/each}}),
            {{/if}}

            {{#if app.web.apache.location}}
            :location => %w( {{#each app.web.apache.location}}{{this}} {{/each}}),
            {{/if}}

            {{#if app.web.apache.htaccess}}
            :htaccess => %w( {{#each app.web.apache.htaccess}}{{this}} {{/each}}),
            {{/if}}

            {{#if app.web.apache.mixins}}
            :mixins => %w( {{#each app.web.apache.mixins}}{{this}} {{/each}}),
            {{/if}}

            {{#if app.web.ssl_cert_name}}
            :cert_name => subst_string('{{app.web.ssl_cert_name}}', app), # likely pulling from databag here
            {{else}}
            :cert_name => nil, # use default (wildcard) SSL cert
            {{/if}}

            {{#if app.web.filters}}
            :filters => %w({{#each app.web.filters}}{{uri}} {{/each}}),
            {{/if}}

            {{#if app.web.hostname}}
            :server_name => subst_string('{{app.web.hostname}}', app)
            {{else}}
            :server_name => nil
            {{/if}}
        }
        config[:vhost] = File.exist? subst('@templates/apache_vhost.conf.erb', app)

        {{#unless app.web.hostname}}
        if config[:cert_name]
            # The cert will tell us what our hostname should be
            # todo: implement whitelist of authorized domains, do not allow certs for others
            common_name = base.local_pem_cn('{{app.name}}', config[:cert_name])
            config[:server_name] = common_name unless common_name.nil? || common_name.start_with?('*')
        end
        {{/unless}}

        config
    end

    def self.apache_service_url (app)
        apache_lib = Chef::Recipe::Apache
        config = get_config(app)
{{#if app.web.mode.separate_hostname}}
        # has its own hostname mode
    {{#if app.web.mount}}
        mount = '{{app.web.mount}}'
        mount = "/#{mount}" unless mount.start_with? '/'
    {{else}}
        mount = '/'
    {{/if}}
        "https://#{apache_lib.get_server_name(nil, config[:mode], app[:hostname], app[:name])}#{mount}"
{{else}}
    {{#if app.web.mount}}
        # has mount mode
        mount = '{{app.web.mount}}'
        mount = "/#{mount}" unless mount.start_with? '/'
        "https://#{app[:hostname]}#{mount}"
    {{else}}
        {{#if app.web.mode.root}}
        # root mode
        "https://#{app[:hostname]}/"
        {{else}}
            {{#if app.path}}
        path = '{{app.path}}'
        path = "/#{path}" unless path.start_with? '/'
                {{#if app.parent}}
        # path/parent mode
        "https://#{app[:hostname]}/{{app.parent}}#{path}"
                {{else}}
        # path/noparent mode (web mode was {{app.web.mode}})
        "https://#{app[:hostname]}#{path}"
                {{/if}}
            {{else}}
        # default mode
        "https://#{app[:hostname]}/#{app[:name]}/"
            {{/if}}
        {{/if}}
    {{/if}}
{{/if}}
    end

    def self.apache (chef, app)
        base = Chef::Recipe::Base
        apache_lib = Chef::Recipe::Apache

{{#if app.web.is_root}}
        # Disable default sites. This app will enable default-ssl on a new site name
        apache_lib.disable_site(chef, 'default-ssl')
        apache_lib.disable_site(chef, 'default')
{{/if}}

{{#if app.web.apache.mods}}
  {{#each app.web.apache.mods}}
        mod_name = '{{this}}'
        if mod_name.start_with? '@'
            mod_name = mod_name[1..mod_name.length-1]
            apache_lib.new_module(chef, mod_name)
        end
        apache_lib.enable_module(chef, mod_name)
  {{/each}}
{{/if}}

        config = get_config(app)
        {{app.web.type}}_{{app.style}} chef, app, config
    end

    def self.apache_uninstall (chef, app)
        apache_lib = Chef::Recipe::Apache
        apache_lib.uninstall_app chef, app[:name], get_config(app)
        apache_reload chef, "uninstalled #{app[:name]}"
    end

    def self.apache_reload (chef, reason = nil)
        Chef::Recipe::Apache.reload(chef, reason)
    end

end