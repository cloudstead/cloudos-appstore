#
# Cookbook Name:: {{app.name}}
# Recipe:: uninstall
#
# {{app.publisher.packaging_copyright}}
#
#

{{#if app.database}}
include_recipe '{{app.database.type}}::lib'
{{/if}}

{{#if app.web}}
include_recipe '{{app.web.type}}::default'
{{/if}}

app_lib = Chef::Recipe::{{app.chefName}}
app = app_lib.define_app self, :uninstall

{{#if app.pre_uninstall}}
    {{#each app.pre_uninstall}}
app_lib.exec self, app, '{{safe exec}}', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}', {{hash_or_nil env}}
    {{/each}}
{{/if}}

# todo: remove packages
# requires that we scan all other active manifests (and possibly recipes)
# for other active apps that may still depend on the package

# Remove/disable web configs
{{#if app.web}}
app_lib.{{app.web.type}}_uninstall self, app

# todo: remove/disable web modules and other web-configs
# requires that we scan all other active manifests/recipes for extant dependencies
{{/if}}

# Track files to delete here
to_delete = []

# Stop all services
app[:services].each do |service|
    app_lib.stop_service self, app, service
    to_delete << "/etc/init.d/#{service[:service_name]}"
end

{{#if app.parent}}
# Do not remove home and doc_root for child apps if they are the parent dir (which is default behavior)
to_delete << app[:run_as_home] unless app[:run_as_home] == '/var/www/{{app.parent}}'
to_delete << app[:doc_root] unless app[:doc_root] == '/var/www/{{app.parent}}'
{{else}}
# Remove user home and doc_root if they are set
to_delete << app[:run_as_home] unless app[:run_as_home].nil?
to_delete << app[:doc_root] unless app[:doc_root].nil?
{{/if}}

{{#if app.dirs}}
# Remove dirs
    {{#each app.dirs}}
to_delete << app_lib.subst('{{this}}', app)
    {{/each}}
{{/if}}
{{#if app.templates}}
# Remove templates
    {{#each app.templates}}
to_delete << app_lib.subst('{{@key}}', app)
    {{/each}}
{{/if}}

{{#if app.copy}}
# Remove 'copy' targets
    {{#each app.copy}}
path = app_lib.subst('{{this}}', app)
if File.directory?(path)
    path << '/' unless path.end_with? '/'
    path << File.basename(app_lib.subst('{{@key}}', app))
end
to_delete << path
    {{/each}}
{{/if}}

{{#if app.symlinks}}
# Remove symlinks
    {{#each app.symlinks}}
to_delete << app_lib.subst('{{this}}', app)
    {{/each}}
{{/if}}

{{#if app.auth.user_management}}
# Remove user management scripts
    {{#each app.auth.user_management.templates}}
to_delete << app_lib.get_user_management_files self, app
    {{/each}}
{{/if}}

{{#if app.append}}
# Remove data appended to files
    {{#each app.append}}
app_lib.unappend self, '{{safe this}}', '{{@key}}', app
    {{/each}}
{{/if}}

{{#if app.mailboxes}}
# Remove mailboxes
raise "Cannot create mailboxes, standard email_lib not found" unless defined? Chef::Recipe::Email.create_mailbox
email_lib = Chef::Recipe::Email
    {{#each app.mailboxes}}
email_lib.delete_mailbox self, app_lib.subst_string('{{address}}', app), app[:hostname], app_lib.subst_string({{quoted_or_nil alias_for}}, app)
    {{/each}}
{{/if}}

{{#if app.logrotate}}
# Remove logrotate scripts
    {{#each app.logrotate}}
to_delete << app_lib.subst('{{this}}', app)
    {{/each}}
{{/if}}


{{#if app.users}}
# Remove LDAP and ubuntu users
    {{#each app.users}}
        {{#if ldap}}
# todo: move this check to the beginning, avoid leaving app half-unistalled
raise "cannot delete LDAP user without LDAP library." unless defined? Chef::Recipe::Kolab.delete_user
Chef::Recipe::Kolab.delete_user self, '{{user}}'

        {{else}}
user_home = {{quoted_or_nil home}}
app_lib.delete_user self, '{{user}}'
to_delete << user_home if user_home
        {{/if}}
    {{/each}}
{{/if}}

{{#if app.cloudos_groups}}
    {{#each app.cloudos_groups}}
app_lib.remove_cloudos_group self, app, '{{@key}}'
    {{/each}}
{{/if}}

{{#if app.database}}
# Drop database
# database-related configuration is in libraries/database_lib.rb and libraries/database_{{app.style}}_lib.rb
app_lib.drop_database self, app
{{/if}}

# Delete files
to_delete = to_delete.flatten.join ' '
unless to_delete.empty?
    bash "deleting {{app.name}} files: #{to_delete}" do
        user 'root'
        code <<-EOF
# Could be a lot of files, use xargs + heredoc to avoid any limits on command line length
xargs rm -rf <<-DEL
#{to_delete}
DEL

EOF
    end
end

{{#if app.web}}
# Reload web server
app_lib.{{app.web.type}}_reload self
{{/if}}

{{#if app.post_uninstall}}
    {{#each app.post_uninstall}}
app_lib.exec self, app, '{{safe exec}}', '{{user}}', '{{safe dir}}', '{{safe stdin}}', '{{safe unless}}', {{hash_or_nil env}}
    {{/each}}
{{/if}}
