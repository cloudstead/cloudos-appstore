#
# Cookbook Name:: {{app.name}}
# Library:: rails_lib
#

class Chef::Recipe::{{app.chefName}}

    def self.{{app.style}}_options (chef, app)
{{#if app.style_options}}
    {{#each app.style_options}}
        option_{{@key}}(chef, app, '{{this}}') if defined? option_{{@key}}
    {{/each}}
{{/if}}
    end

    def self.option_rbenv (chef, app, version)
        git_lib = Chef::Recipe::Git
        git_lib.synchronize(chef, 'https://github.com/sstephenson/rbenv.git', 'tags/v0.4.0', app[:run_as], "#{app[:run_as_home]}/.rbenv")
        git_lib.synchronize(chef, 'https://github.com/sstephenson/ruby-build.git', 'tags/v20150519', app[:run_as], "#{app[:run_as_home]}/.rbenv/plugins/ruby-build")

        append chef, "export PATH=\"#{app[:run_as_home]}/.rbenv/shims:#{app[:run_as_home]}/.rbenv/rbenv/binn:#{app[:run_as_home]}/.rbenv/plugins/ruby-build/ruby-build/bin:#{app[:run_as_home]}/.rbenv/rbenv/libexec:${PATH}\"", bash_rc(app), app
        append chef, 'eval "$(rbenv init -)"', bash_rc(app), app

        etc_default = "/etc/default/#{app[:name]}"
        append chef, "export PATH=\"#{app[:run_as_home]}/.rbenv/shims:#{app[:run_as_home]}/.rbenv/rbenv/bin:#{app[:run_as_home]}/.rbenv/plugins/ruby-build/ruby-build/bin:#{app[:run_as_home]}/.rbenv/rbenv/libexec:${PATH}\"", etc_default, app
        append chef, 'rbenv init - > /dev/null 2>&1', etc_default, app

        app_lib = Chef::Recipe::{{app.chefName}}
        rdir = rails_dir(app)
        renv = rails_env(chef, app)

        chef.bash "install rbenv version #{version} in #{rdir}" do
            user app[:run_as]
            cwd rdir
            environment renv
            code <<-EOF
. #{app_lib.bash_rc(app)}
if [ ! -x #{app[:run_as_home]}/.rbenv/versions/#{version}/bin/ruby ] ; then
  rbenv-install #{version}
fi
rbenv global #{version}
rbenv local #{version}
EOF
        end
    end

    def self.rails_env (chef, app)
        env = { 'HOME' => app[:run_as_home] }
{{#if app.style_options}}
    {{#each app.style_options}}
        option_{{@key}}_env(chef, app, '{{this}}', env) if defined? option_{{@key}}_env
    {{/each}}
        env
{{/if}}
    end

    def self.init (chef, app)

{{#unless app.style_options.rbenv}}
        %w( ruby1.9.1 ruby1.9.1-dev ).each do |pkg|
            chef.package pkg do
                action :install
            end
        end
{{/unless}}
        %w( libxml2 libxml2-dev libxslt1.1 libxslt1-dev cmake bison ).each do |pkg|
            chef.package pkg do
                action :install
            end
        end

        base = Chef::Recipe::Base
        ports_bag = base.ports_databag chef, '{{app.name}}'
        app[:port] = ports_bag['primary']

{{#unless app.sysinit}}
{{#unless app.services}}
        svc = app[:default_service_name]
        app[:services] << {
            :service_name => svc,
            :proc_pattern => "./script/rails s -p #{app[:port]}"
        }
        app[:service_name] = app[:service_names]['{{app.name}}'] = svc
{{/unless}}
{{/unless}}
    end

    def self.rails_dir (app)
        dir = app[:run_as]
        dir = app[:repo_dir] if app[:repo_dir].to_s != ''
        "#{app[:run_as_home]}/#{dir}"
    end

    def self.init_rails (chef, app)
        app_lib = Chef::Recipe::{{app.chefName}}
        rdir = rails_dir(app)
        renv = rails_env(chef, app)
        base = Chef::Recipe::Base

        unless app[:mode] == :uninstall
            unless app[:mode] == :uninstall
{{#if app.style_options.rbenv}}
                %w( bundler foreman ).each do |gem|
                    ruser = app[:run_as]
                    dir = rails_dir(app)
{{else}}
                %w( bundler rake foreman ).each do |gem|
                    ruser = 'root'
                    dir = '/tmp'
{{/if}}
                    chef.bash "install ruby gem for {{app.name}}: #{gem}" do
                        user ruser
                        cwd dir
                        environment renv
                        code <<-EOF
. #{app_lib.bash_rc(app)}
success=0
for i in 1 2 3 ; do
    gem install #{gem} --no-ri --no-rdoc
    if [ $? -eq 0 ] ; then
        success=1
        break
    fi
done
if [ ${success} -ne 1 ] ; then
    echo "gem install #{gem} failed for {{app.name}}"
    exit 1
fi
{{#unless app.style_options.rbenv}}
# Ensure binaries are reachable by all users
find /var/lib/gems -type d | xargs chmod a+rx
find $(find /var/lib/gems -type d -name bin) -type f | xargs chmod a+rx
{{/unless}}
EOF
                    end
                end
            end

            %x(chmod a+rx $(which bundle))  # for sanity
            chef.bash "install gems required by {{app.name}} in #{rdir}" do
              user app[:run_as]
              cwd rdir
              environment renv
              code <<-EOF
. #{app_lib.bash_rc(app)}
success=0
for i in 1 2 3 ; do
  bundle install --path vendor/bundle --without development test --binstubs --shebang ruby-local-exec
  if [ $? -eq 0 ] ; then
    success=1
    break
  fi
done
if [ ${success} -ne 1 ] ; then
  echo "bundle install for {{app.name}} failed, dir was $(pwd)"
  exit 1
fi

# Add env file for foreman, turn on production mode
touch #{rdir}/.env && chmod 600 #{rdir}/.env && \
echo "
RAILS_ENV=production
LDAP_PASSWORD=#{base.password 'ldap'}
" > #{rdir}/.env

EOF
            end

            chef.bash 'ensure gems for {{app.name}} are readable' do
              user 'root'
              code <<-EOF
for dir in $(find /var/lib/gems -type d) ; do
  chmod a+rx "${dir}"
done

for file in $(find /var/lib/gems -type f) ; do
  chmod a+r "${file}"
done

EOF
            end
        end
    end

end