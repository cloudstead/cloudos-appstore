#
# Cookbook Name:: {{app.name}}
# Library:: common_lib
#
# {{app.publisher.packaging_copyright}}
#

require 'time'

class Chef::Recipe::{{app.chefName}}

    def self.define_app (chef)
        base = Chef::Recipe::Base
        app = {
            :name => '{{app.name}}',
            :hostname => %x(hostname).strip,
            :ipaddress => chef.node['ipaddress'],
            :uniq => [],
            :rand => [],
            :services => [],
            :chef_user => base.chef_user,
            :chef_user_home => base.chef_user_home,
            :mail_user => 'cloudos_system_mailer',
            :mail_password => base.password('system_mailer')
        }

        (0...9).each do |n|
        app[:uniq] << base.password("{{app.name}}_#{n}")
        app[:rand] << SecureRandom.hex(64)
        end

{{#if app.users}}
        app[:users] = {}
    {{#each app.users}}
        app[:users]['{{label}}'] = {
            :name => '{{user}}',
            :home => {{quoted_or_nil home}},
            :kerberos => {{#if kerberos}}true{{else}}false{{/if}}
        }
    {{/each}}
{{/if}}

        {{#if app.passwords}}
        app[:passwords] = {}
            {{#each app.passwords}}
        app[:passwords]['{{this}}'] = base.password '{{this}}'
            {{/each}}
        {{/if}}

        {{#if app.web.mount}}
        app[:mount] = '{{app.web.mount}}'
        {{/if}}

        app[:databag] = {}
        app[:databag_replacements] = {}

        # If we have a ports databag, define it and populate replacements
        begin
            app[:databag][:ports] = chef.data_bag_item('{{app.name}}', 'ports')
            app[:databag][:ports].each do |bagkey, bagvalue|
                define_databag_replacements app[:databag_replacements], "@config[ports]", bagkey, bagvalue
            end
        rescue => e
            puts "{{app.name}}/ports databag not found or error reading: #{e}"
        end

        # If we have a base databag, define it and populate replacements, then set hostname
        begin
            app[:databag][:base] = chef.data_bag_item('{{app.name}}', 'base')
            app[:databag][:base].each do |bagkey, bagvalue|
                define_databag_replacements app[:databag_replacements], "@config[base]", bagkey, bagvalue
            end

            # set the hostname based on values in the base databag
            hostname = app[:databag][:base]['hostname']
            app[:domain] = parent_domain = app[:databag][:base]['parent_domain']
            fqdn = "#{hostname}.#{parent_domain}"

            # But only if we are already this hostname -- the install.sh script should set the hostname for us
            raise "Please run with install.sh: system hostname (#{app[:hostname]}) didn't match base databag value (#{fqdn})" unless app[:hostname] == fqdn

            base.set_hostname self, fqdn

        rescue => e
            puts "{{app.name}}/base databag not found or error reading: #{e}"
        end

        # If there is a cloudos-init databag, define it as @cloudos
        begin
            app[:cloudos_databag] = chef.data_bag_item('cloudos', 'init')
            app[:cloudos_databag].each do |bagkey, bagvalue|
                define_databag_replacements app[:databag_replacements], "@cloudos", bagkey, bagvalue
            end
        rescue => e
            puts "cloudos/init databag not found or error reading: #{e}"
        end

        app[:domain] ||= %x(hostname -d).strip

        {{#if app.config}}
            {{#each app.config}}
        app[:databag][:{{ident name}}] = chef.data_bag_item('{{app.name}}', '{{name}}')
                {{#if config_metadata}}
        # Before defining {{name}} databag replacements, check for any empty passwords that should be auto-generated
                    {{#each config_metadata.categories}}
                        {{#each fields}}
                            {{#if is_password}}
        if app[:databag][:{{ident name}}]{{dots_to_brackets @key}}.to_s_empty?
          databag_file = "#{base.chef_databags(app[:name])}/{{name}}.json"
          raise "Missing databag: #{databag_file}" unless File.exists? databag_file

                                {{#if login}}
          # password field knows where its login field is
          login = app[:databag][:{{ident name}}]{{dots_to_brackets login}}
                                {{else}}
          # assume login field is in the same place as password and is called 'login'
          login = app[:databag][:{{ident name}}]{{login_field_for_password @key}}
                                {{/if}}
          raise 'Error determining login for auto-generated password: {{@key}}' unless login

          # Write generated password to databag, update databag struct, email password to admin
          new_password = base.random_password
          if %x(cat #{databag_file} | cos json -o write -p '{{@key}}' -v '"#{new_password}"' -w #{databag_file} && echo $?).to_i != 0
            raise 'Error generating random password'
          end
          app[:databag][:{{ident name}}]{{dots_to_brackets @key}} = new_password
          notify_generated_password chef, app, login, new_password
        end
                            {{/if}}
                        {{/each}}
                    {{/each}}
                {{/if}}
        app[:databag][:{{ident name}}].each do |bagkey, bagvalue|
            define_databag_replacements app[:databag_replacements], '@config[{{ident name}}]', bagkey, bagvalue
        end
            {{/each}}
        {{/if}}

        {{#if app.web}}
          {{#if app.web.mount}}
        app[:mount] = subst_string('{{app.web.mount}}', app)
          {{else}}
            {{#if app.web.is_separate_hostname}}
        app[:mount] = ''
            {{else}}
        app[:mount] = subst_string('{{app.name}}', app)
            {{/if}}
          {{/if}}

          {{#if app.web.local_mount}}
        app[:local_mount] = subst_string('{{app.web.local_mount}}', app)
          {{else}}
        app[:local_mount] = subst_string('{{app.web.local_mount}}', app)
          {{/if}}
        {{else}}
        app[:mount] = app[:local_mount] = ''
        {{/if}}

        app[:service_name] = app[:name].gsub('-', '_').gsub(/\W/, '')
        app[:ldap_domain] = "dc=#{app[:domain].gsub(/\./, ',dc=')}"

        init_user chef, app

        return app
    end

    DATABAG_SIMPLE_TYPES = [ String, Fixnum, TrueClass, FalseClass ]
    def self.define_databag_replacements(hash, base, bagkey, bagvalue)
        if DATABAG_SIMPLE_TYPES.include?(bagvalue.class)
            hash["#{base}[#{bagkey}]"] = bagvalue.to_s
        elsif bagvalue
            bagvalue.each do |subkey, subvalue|
              define_databag_replacements hash, "#{base}[#{bagkey}]", subkey, subvalue
            end
        end
    end

    def self.subst_path (value, app)
        subst(value, app, true)
    end

    def self.subst_string (value, app)
        subst(value, app, false)
    end

    def self.subst (value, app, is_path = true)
        return nil if value.nil? || value.to_s == ''

        base = Chef::Recipe::Base

        if app
            # Perform databag replacements first, since they may contain other @directives
            if app[:databag_replacements]
                app[:databag_replacements].each do |find, replace|
                    value = value.gsub(find, replace.to_s)
                end
            end

{{#if app.repo}}
            value = value.gsub('@repo', "#{app[:run_as_home]}/#{app[:repo_dir]}")
{{/if}}
            doc_root = (defined?(app[:doc_root]) && app[:doc_root]) ? app[:doc_root] : '@doc_root_undefined'
            run_as = (defined?(app[:run_as]) && app[:run_as]) ? app[:run_as] : '@run_as_undefined'
            run_as_home = (defined?(app[:run_as_home]) && app[:run_as_home]) ? app[:run_as_home] : '@run_as_home_undefined'

            value = value.gsub('@doc_root', doc_root)
            value = value.gsub('@name', app[:name])
            value = value.gsub('@ipaddress', app[:ipaddress])
            value = value.gsub('@hostname', %x(hostname).strip)
            value = value.gsub('@domain', app[:domain]) if app[:domain]
            value = value.gsub('@run_as', run_as)
            value = value.gsub('@home', run_as_home)
            value = value.gsub('@mail_user', app[:mail_user])
            value = value.gsub('@mail_password', app[:mail_password])
            value = value.gsub('@dbname', app[:dbname]) if app[:dbname]
            value = value.gsub('@dbuser', app[:dbuser]) if app[:dbuser]
            value = value.gsub('@dbpass', app[:dbpass]) if app[:dbpass]

            value = value.gsub('@backup_dir', app[:backup_dir]) if app[:backup_dir]
            value = value.gsub('@backup_timestamp', app[:backup_timestamp]) if app[:backup_timestamp]

            (0...9).each do |n|
                value = value.gsub("@uniq[#{n}]", app[:uniq][n])
                value = value.gsub("@rand[#{n}]", app[:rand][n])
            end

{{#if app.passwords}}
    {{#each app.passwords}}
            app[:passwords].each do |user, pass|
                 value = value.gsub("@password[#{user}]", app[:passwords][user])
            end
    {{/each}}
{{/if}}

{{#if app.groups}}
    {{#each app.groups}}
            if app[:groups] && app[:groups]['{{group}}']
                value = value.gsub('@group[{{group}}]', app[:groups]['{{group}}'][:name])
            end
    {{/each}}
{{/if}}
{{#if app.users}}
    {{#each app.users}}
            if app[:users] && app[:users]['{{user}}']
                value = value.gsub('@user[{{user}}]', app[:users]['{{user}}'][:name])
            end
    {{/each}}
{{/if}}
        end

        value = value.gsub('@chef_user', base.chef_user)
        value = value.gsub('@chef_home', base.chef_user_home)
        value = value.gsub('@files', "#{base.chef_files(app[:name])}")
        value = value.gsub('@now_millis', (1000*Time.now.to_f).to_i.to_s)
        value = value.gsub('@timezone', %x(cat /etc/timezone).strip) if File.exists? '/etc/timezone'
        value = value.gsub('@web_mode', '{{app.web.mode}}') unless '{{app.web.mode}}'.empty?
        value = value.gsub('@lang', %x(locale | grep LANG= | tr '=_' ' ' | awk '{print $2}').strip) if value.include?('@lang')

        if value.include? '@currency_code'
          money_locale = %x(locale | grep LC_MONETARY | tr '=".' ' ' | awk '{print $2}').strip
          if money_locale.length > 0
            locale_file="/usr/share/i18n/locales/#{money_locale}"
            if File.exists? locale_file
              currency_code = %x(cat #{locale_file} | grep int_curr_symbol | awk '{print $2}' | tr -d '"' | sed -e 's,<U, ,g' | tr -d '>').strip.split(" ").map(&:hex).pack('C*').force_encoding('utf-8').strip
              if currency_code.empty?
                raise "Error determining currency code from #{locale_file}"
              end
              value = value.gsub('@currency_code', currency_code)
            end
          end
        end

        if defined? Chef::Recipe::Java.java_home
            java_home = Chef::Recipe::Java.java_home
            value = value.gsub('@java_home', java_home) unless java_home.nil?
        end

        if app && !value.start_with?('/') && is_path
            value = "#{app[:run_as_home]}/#{value}"
        end

        # Look for function prefixes and process their innards
        { '@lower'  => lambda { |val| val.downcase },
          '@length' => lambda { |val| val.length },
          '@now'    => lambda { |val| Time.now.strftime(val) },
          '@sha256' => lambda { |val| Digest::SHA256.hexdigest(val) },
          '@md5'    => lambda { |val| Digest::MD5.hexdigest(val) },
          '@exec'   => lambda { |val| %x(#{val}).strip } }.each do |fname, func|
            prefix = "#{fname}("
            found = value.index prefix
            while found
                closing_paren = value.index ')', found+1
                inner_value = value[found + prefix.length, closing_paren - found - prefix.length]
                value = value.sub("#{prefix}#{inner_value})", func.call(inner_value))
                found = value.index prefix
            end
        end

        value
    end

    def self.define_group(chef, app, group_name, members_list = nil)
        if members_list
            chef.group group_name do
                action :create
                members "#{members_list.join(',')}"
            end
        else
            chef.group group_name do
                action :create
            end
        end
    end

    def self.group_exists? group_name
        %x(grep '^#{group_name}:' | wc -l).strip
    end

    def self.user(chef, app, user_name, user_home, group_name, can_login, is_system)
        if user_home
            chef.directory user_home do
                owner user_name
                action :create
            end
        end

        user_shell = can_login ? '/bin/bash' : '/usr/sbin/nologin'
        chef.user user_name do
            home user_home
            gid group_name
            shell user_shell
            system is_system
        end

        chef.bash "chown #{user_name} #{user_home}" do
            user 'root'
            code <<-EOH
chown #{user_name} #{user_home}
            EOH
        end
    end

    def self.delete_user(chef, user_name)
        chef.bash "delete_user: userdel #{user_name}" do
            user 'root'
            code <<-EOH
userdel #{user_name}
EOH
        end
    end

    def self.init_user(chef, app)

        can_login = false
{{#if app.run_as}}
    {{#if app.run_as.user}}
        app[:run_as] = '{{app.run_as.user}}'
    {{/if}}

        can_login = '{{app.run_as.can_login}}' == 'true'
{{else}}
    {{#if app.parent}}
        app[:run_as] = '{{app.parent}}'
    {{/if}}
{{/if}}
        app[:run_as] ||= '{{app.name}}'
        app[:run_as_home] = "/home/#{app[:run_as]}"

        self.user chef, app, app[:run_as], app[:run_as_home], nil, can_login, false

{{#if app.web.doc_root}}
        app[:doc_root] = "#{app[:run_as_home]}/{{app.web.doc_root}}"
{{else}}
        app[:doc_root] = "#{app[:run_as_home]}/{{app.name}}"
{{/if}}
    end

    def self.dir (chef, dir, app)
        dir = subst(dir, app)
        chef.directory dir do
            owner app[:run_as]
            group app[:run_as]
            mode '0755'
            action :create
        end
        permission(chef, dir, app, app[:run_as], app[:run_as], "u+rx")
    end

    def self.template_file(chef, template_src, template_dest, app)
        template_src = File.basename(template_dest) if template_src == '_'
        template_dest = subst(template_dest, app)

        chef.template template_dest do
            source "#{template_src}.erb"
            owner app[:run_as]
            group app[:run_as]
            mode '0700'
            variables ({ :app => app })
            action :create
        end
    end

    def self.symlink(chef, symlink_target, symlink_link, app)

        symlink_link = subst(symlink_link, app)

        target_parts = symlink_target.split
        if target_parts.first == 'which'
            # it's a command and they want us to find the path to it
            command = target_parts.last
            symlink_target = %x(which #{command}).strip
            raise "symlink: Command not found: #{command}" if symlink_target.nil? || symlink_target.empty?
        else
            # otherwise it's a regular path, perform subst on it
            symlink_target = subst(symlink_target, app)
        end

        chef.bash "ln -s #{symlink_target} #{symlink_link}" do
            user 'root'
            code <<-EOH
ln -s #{symlink_target} #{symlink_link}
            EOH
            not_if { File.exists? symlink_link }
        end
    end

    def self.permission(chef, path, app, chown, chgrp, perms, recursive = false)
        target = app.nil? ? path : subst(path, app)
        chown_target = chown.nil? ? nil : ( chown.include?('.') ? chown : (chgrp.nil? ? chown : "#{chown}.#{chgrp}") )
        recursive_flag = recursive ? '-R' : ''
        if chown_target.nil?
            unless chgrp.nil?
                chgrp = subst_string(chgrp, app)
                chef.bash "apply group=#{chgrp} to #{target}, recursive=#{recursive}" do
                    user 'root'
                    code <<-EOH
if [ ! -e "#{target}" ] ; then
  # but only if the target does not contain an asterisk...
  if echo x"#{target}" | grep '*' > /dev/null ; then
    echo "permission: target #{target} contains asterisk, not touching"
    chgrp #{recursive_flag} #{chgrp} #{target}
  else
    touch "#{target}"
    chgrp #{recursive_flag} #{chgrp} "#{target}"
  fi
else
  chgrp #{recursive_flag} #{chgrp} "#{target}"
fi
                    EOH
                end
            end
        else
            chown_target = app.nil? ? chown_target : subst_string(chown_target, app)
            chef.bash "apply ownership=#{chown_target} to #{target}, recursive=#{recursive}" do
                user 'root'
                code <<-EOH
if [ ! -e "#{target}" ] ; then
  # but only if the target does not contain an asterisk...
  if echo x"#{target}" | grep '*' > /dev/null ; then
    echo "permission: target #{target} contains asterisk, not touching"
    chown #{recursive_flag} #{chown_target} #{target}
  else
    touch "#{target}"
    chown #{recursive_flag} #{chown_target} "#{target}"
  fi
else
  chown #{recursive_flag} #{chown_target} "#{target}"
fi
                EOH
            end
        end

        unless perms.nil?
            chef.bash "apply perms=#{perms} to #{target}, recursive=#{recursive}" do
                user 'root'
                code <<-EOH
if [ ! -e "#{target}" ] ; then
  # but only if the target does not contain an asterisk...
  if echo x"#{target}" | grep '*' > /dev/null ; then
    echo "permission: target #{target} contains asterisk, not touching"
    chmod #{recursive_flag} #{perms} #{target}
  else
    touch "#{target}"
    chmod #{recursive_flag} #{perms} "#{target}"
  fi
else
  chmod #{recursive_flag} #{perms} "#{target}"
fi
                EOH
            end
        end
    end

    def self.move(chef, to, from, app)
        to = subst(to, app)
        from = subst(from, app)
        check = to
        check = check + "/#{File.basename from}" if File.directory? to

        chef.bash "mv #{from} #{to}" do
            user 'root'
            code <<-EOH
# check is #{check}
mv #{from} #{to}
            EOH
            only_if { %x(ls -1 #{check}).to_i == 0 }
        end
    end

    def self.copy(chef, to, from, app)
        to = subst(to, app)
        from = subst(from, app)
        chef.bash "rsync -avc #{from} #{to}" do
            user 'root'
            code <<-EOH
rsync -avc #{from} #{to}
            EOH
        end
    end

    def self.append(chef, data, target, app)
        target = subst(target, app)
        chef.bash "appending to #{target} for app #{app[:name]}: #{data}" do
            user 'root'
            code <<-EOH
cat >> #{target} <<EOF
    #{data.gsub('$', '\\\\$')}
EOF
            EOH
            not_if { File.readlines("#{target}").grep(/Regexp.escape(data)/).size > 0 }
        end
    end

    def self.unappend(chef, data, target, app)
        base = Chef::Recipe::Base
        target = subst(target, app)
        base.remove_from_file(chef, target, data.gsub('$', '\\\\$'))
    end

    def self.exec (chef, app, exec, exec_user, dir, stdin = nil, unless_file = nil)

        exec = subst_string(exec, app)
        exec_user ||= 'root'
        exec_user = subst_string(exec_user, app)
        dir = (dir.to_s == '') ? app[:run_as_home] : subst(dir, app)
        stdin = subst(stdin, app)
        unless_file = subst(unless_file, app)

        cmd = (stdin.to_s == '') ? exec : "echo '#{self.subst(stdin)}' | #{exec}"
        if cmd.start_with? '@bash'
          cmd = "#{cmd.sub('@bash', 'bash -c "')} #{cmd.gsub('"', '\"')} \""
        end

        chef.bash "exec: #{exec} in #{dir} with stdin #{stdin}" do
            user 'root'
            cwd dir
            code <<-EOH
if [ "#{exec_user}" = 'root' ] ; then
    #{cmd}
else
    sudo -u #{exec_user} -H #{cmd}
fi
            EOH
            only_if { unless_file.to_s == '' || !File.exists?(unless_file) }
        end

    end

    def self.logrotate (chef, app, path)
        base = Chef::Recipe::Base
        base.logrotate chef, subst(path, app)
    end

    def self.sysinit (chef, app, command)
        if command.start_with? 'jrun'
            command_parts = command.split(':')
            java_class = command_parts[1]
            java_yml = command_parts[2]
            java_yml = subst(java_yml, app) unless java_yml.nil?
            run_as = command_parts[3]
            run_as = subst_string(run_as, app) unless run_as.nil?
            run_as ||= app[:run_as]

            java = Chef::Recipe::Java
            app_config = java.define_service(chef, subst('@name', app), run_as, java_class, java_yml)
            app[:services] << app_config

        elsif command.start_with? 'wrap'
            command_parts = command.split(':')

            start_script = command_parts[1]
            stop_script = ''
            if start_script.include? ';'
                script_parts = start_script.split(';')
                start_script = subst(script_parts[0], app)
                stop_script = subst(script_parts[1], app)
            else
                start_script = subst(start_script, app)
            end

            pattern = subst_string(command_parts[2], app)
            pattern ||= start_script

            run_as = command_parts[3]
            run_as = subst_string(run_as, app) unless run_as.nil?
            run_as ||= app[:run_as]

            svc = "#{app[:service_name]}_#{File.basename(start_script, File.extname(start_script))}"
            init_svc = "/etc/init.d/#{svc}"
            app[:services] << { :service_name => svc, :proc_pattern => pattern }

            unless File.exists? init_svc
                chef.template init_svc do
                    source "init_wrapper.sh.erb"
                    owner 'root'
                    group 'root'
                    mode '0755'
                    variables({
                        :start_script => start_script,
                        :stop_script => stop_script,
                        :app => app,
                        :pattern => pattern,
                        :run_as => run_as
                    })
                    action :create
                end

                chef.service svc do
                    pattern pattern
                    supports [ :start => true, :stop => true ]
                    action [ :enable, :start ]
                end
            end

        else
            command = subst(command, app)

            svc = "#{app[:service_name]}_#{File.basename(command, File.extname(command))}"
            init_svc = "/etc/init.d/#{svc}"
            app[:services] << { :service_name => svc, :proc_pattern => command }

            unless File.exists? init_svc
                chef.template init_svc do
                    source 'init.sh.erb'
                    owner 'root'
                    group 'root'
                    mode '0755'
                    variables({ :command => command, :app => app })
                    action :create
                end

                chef.service app[:service_name] do
                    pattern command
                    supports [ :start => true, :stop => true ]
                    action [ :enable, :start ]
                end
            end
        end
    end

    def self.service (chef, app, name, pattern, provider = nil)
        pattern = name if pattern.to_s.empty?

        svc = name;
        init_svc = "/etc/init.d/#{svc}"
        app[:services] << { :service_name => svc, :proc_pattern => pattern }

        chef.service svc do
            pattern pattern
            provider provider
            supports :start => true, :stop => true, :restart => true
            action [ :enable, :restart ]
        end
    end

    def self.stop_service (chef, app, service)
        chef.bash "stopping #{service[:service_name]}" do
            user 'root'
            code <<-EOH
service #{service[:service_name]} stop
if [ $? -ne 0 ] ; then
    sleep 2s
    num_procs=$(ps auxwwwww | egrep -- "#{service[:proc_pattern]}" | grep -v egrep | wc -l | tr -d ' ')
    if [ $num_procs -gt 0 ] ; then
        ps auxwwwww | egrep -- "#{service[:proc_pattern]}" | grep -v egrep | awk '{print $2}' | xargs kill
        sleep 5s
        num_procs=$(ps auxwwwww | grep -- "#{service[:proc_pattern]}" | wc -l | tr -d ' ')
        if [ $num_procs -gt 0 ] ; then
            ps auxwwwww | egrep -- "#{service[:proc_pattern]}" | grep -v egrep | awk '{print $2}' | xargs kill -9
        fi
    fi
fi
EOH
        end
    end

    def self.validate_service (chef, app, service)
        chef.bash "validating #{service[:service_name]} is running (pattern=#{service[:proc_pattern]})" do
            user 'root'
            code <<-EOH
num_procs=$(ps auxwwwww | egrep -- "#{service[:proc_pattern]}" | grep -v egrep | wc -l | tr -d ' ')
if [ $num_procs -gt 0 ] ; then exit 0 ; else exit 1 ; fi
EOH
        end
    end

    def self.validate_web (chef, app, timeout = 1800)
        raise "No service URL found for app: #{app[:name]}" if !app[:service_url]

        service_map = []
        app[:services].each do |service|
            service_map[] << "#{service[:service_name]}|#{service[:proc_pattern]}"
        end

        chef.bash "validating #{app[:name]} is listening on at #{app[:service_url]}" do
            user 'root'
code <<-EOH

if [ ! -z "#{service_map.join(' ')}" ] ; then
  for service in #{service_map.join(' ')} ; do
    service_name = $(echo -n ${service} | awk -F '|' '{print $1}'
    proc_pattern = $(echo -n ${service} | awk -F '|' '{print $2}'
    num_procs=$(ps auxwwwww | egrep -- ${proc_pattern} | grep -v egrep | wc -l | tr -d ' ')
    if [ $num_procs -eq 0 ] ; then
      service ${service_name} restart
    fi
  done
fi

start=$(date +%s)
while [ $(expr $(date +%s) - ${start}) -lt #{timeout} ] ; do
  http_status="$(curl -sL -w "%{http_code}\n" --max-time 10 "https://#{app[:service_url]}/" -o /dev/null)"
  http_status_type=$(expr $http_status / 100)
  if [[ $? -eq 0  && ( $http_status == 2 || $http_status == 3 ) ]] ; then
    echo "#{app[:name]} is running"
    exit 0
  else
    echo "Still waiting for #{app[:name]} to be running..."
    sleep 5s
  fi
done

echo "#{app[:name]} is not running"
exit 1

EOH
        end
    end

    def self.user_management (chef, app)
        {{#each app.auth.user_management.templates}}
        script = subst('{{this}}', app)
        chef.template script do
            owner app[:run_as]
            mode '0744'
            variables({ :app => app })
            action :create
        end
        {{/each}}

        chef.directory '/etc/rooty_handlers' do
            owner 'root'
            group 'root'
            mode '0700'
            action :create
        end

        chef.template "/etc/rooty_handlers/#{app[:name]}_user_mgmt.yml" do
            source 'rooty_handler.yml.erb'
            owner 'root'
            group 'root'
            mode '0400'
            variables({ :app => app })
            action :create
        end
    end

    def self.get_user_management_files (chef, app)
        files = []
        {{#each app.auth.user_management.templates}}
        files << subst('{{this}}', app)
        {{/each}}
        files << "/etc/rooty_handlers/#{app[:name]}_user_mgmt.yml"
        files
    end

    def self.cloudos_group (chef, app, name, description, quota, mirror, members)

        description = "--description '#{subst_string(description, app)}'" unless description.to_s.empty?
        quota       = "--quota       '#{subst_string(quota, app)}'"       unless quota.to_s.empty?
        mirror      = "--mirror      '#{subst_string(mirror, app)}'"      unless mirror.to_s.empty?
        members     = "--members     '#{subst_string(members, app)}'"     unless members.to_s.empty?

        chef.bash "create cloudos_group: #{name} with mirror=#{mirror} and members=#{members}" do
            user 'root'
            cwd '/tmp'
            code <<-EOH
cos sudo --command group --name #{name} --operation create #{description} #{quota} #{mirror} #{members}
            EOH
        end
    end

    def self.remove_cloudos_group (chef, app, name)
        chef.bash "create cloudos_group: #{name} with mirror=#{mirror} and members=#{members}" do
        user 'root'
        cwd '/tmp'
        code <<-EOH
cos sudo --command group --name #{name} --operation delete
EOH
        end
    end

    def self.notify_generated_password(chef, app, login, password)
        base = Chef::Recipe::Base

        # Determine who should receive it
        unless File.exist?("#{base.chef_databags('base')}/admin.json")
            raise 'notify_generated_password: no base/admin.json databag found'
        end
        admin = chef.data_bag_item('base', 'admin')

        rval=%x(
sendmail -oi -t <<EOMAIL
From: do-not-reply@#{%x(hostname).strip}
To: #{admin[:email]}
Subject: Auto-generated password for CloudOs app: #{app[:name]}

Hello #{admin[:name]},

This is an automated message from your private Cloudstead.

When the #{app[:name]} app was recently installed, the password auto-generator was used to create a password.

username: #{login}
password: #{password}

It is highly recommended that you change this password immediately by logging into the #{app[:name]} app
with the above username and password.

EOMAIL
exit $?
).to_i
        if rval.nil? || rval != 0
            raise "Error emailing auto-generated password for #{app[:name]}/#{login}"
        end
    end
end
